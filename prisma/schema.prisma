
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Issue {
  slug        String @unique@default("") @id

  title       String
  cover       String
  description String
  pdf         String?
  published   Boolean @default(false)
  publishedOn DateTime @default(now())

  articles    Article[]
}

model Article {
  slug        String @unique @id
  
  title       String
  excerpt     String?
  content     String
  published   ArticleStatus @default(SUBMITTED)
  publishedOn DateTime @default(now())

  issue       Issue? @relation(fields: [issueSlug], references: [slug])   
  issueSlug   String?
  authors     Person[]
  topics      Topic[]
}

model Topic {
  slug        String @unique@default("") @id

  name        String
  description String

  articles    Article[]
}

model Person {
  slug        String @unique@default("") @id

  name        String
  position    String
  description String
  gradYear    Int
  isExec      Boolean @default(false)
  image       String?

  articles    Article[]
}


// Auth models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    permission    PersonPerms @default(NORMIE)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    @@unique([identifier, token])
}

enum PersonPerms {
  NORMIE
  EDITOR
  EXEC
}

enum ArticleStatus {
  SUBMITTED
  EDITED
  PUBLISHED
}