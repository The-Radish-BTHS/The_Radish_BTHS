datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  hasSignedUp   Boolean   @default(false)

  lastArticleSubmission DateTime?
  lastTopicCreation     DateTime?

  permission  UserPermission @default(NORMIE)
  submissions Submission[]

  personId String @unique
  person   Person @relation(fields: [personId], references: [id])
}

model Issue {
  id   String @id @default(cuid())
  slug String @unique

  title       String
  coverUrl    String
  description String
  pdf         String?
  published   Boolean  @default(false)
  publishedOn DateTime @default(now())

  articles Article[]
}

model Article {
  id   String @id @default(cuid())
  slug String @unique

  title       String
  excerpt     String?
  content     String
  published   Boolean  @default(false)
  publishedOn DateTime @default(now())

  issue      Issue?      @relation(fields: [issueId], references: [id])
  issueId    String?
  authors    Person[]
  topics     Topic[]
  submission Submission?
}

model Submission {
  id               String   @id @default(cuid())
  link             String
  title            String
  userId           String
  graphicsRequest  String?
  graphicsComplete Boolean  @default(false)
  imageUrls        String[] @default([])
  timeFrame        String?
  otherTopics      String?
  beenEdited       Boolean  @default(false)
  submittedAt      DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  topics  Topic[]
  authors Person[]

  articleId String?  @unique
  article   Article? @relation(fields: [articleId], references: [id])
}

model Topic {
  id   String @id @default(cuid())
  slug String @unique

  name        String
  description String

  articles    Article[]
  submissions Submission[]
}

model Person {
  id   String @id @default(cuid())
  slug String @unique

  name        String
  position    String
  description String
  gradYear    Int
  isExec      Boolean @default(false)
  image       String?

  articles    Article[]
  submissions Submission[]
  user        User?
}

enum UserPermission {
  NORMIE
  EDITOR
  ARTIST
  TEAMS_MEMBER
  EXEC
}

enum ArticleStatus {
  SUBMITTED
  EDITED
  PUBLISHED
}
