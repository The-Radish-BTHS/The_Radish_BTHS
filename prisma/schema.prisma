datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  lastArticleSubmission DateTime?
  lastTopicCreation     DateTime?

  permission  UserPermission @default(NORMIE)
  submissions Submission[]

  personSlug String @unique
  person     Person @relation(fields: [personSlug], references: [slug])
}

model Issue {
  slug String @id

  title       String
  coverUrl    String
  description String
  pdf         String?
  published   Boolean  @default(false)
  publishedOn DateTime @default(now())

  articles Article[]
}

model Article {
  slug String @id

  title       String
  excerpt     String?
  content     String
  published   Boolean  @default(false)
  publishedOn DateTime @default(now())

  issue     Issue?   @relation(fields: [issueSlug], references: [slug])
  issueSlug String?
  authors   Person[]
  topics    Topic[]
}

model Submission {
  id      String   @id @default(cuid())
  link    String
  title   String
  userId  String
  graphicsRequest   String?
  graphicsComplete  Boolean @default(false)
  timeFrame         String?
  user    User     @relation(fields: [userId], references: [id])
  topics  Topic[]
  authors Person[]
}

model Topic {
  slug String @id

  name        String
  description String

  articles    Article[]
  submissions Submission[]
}

model Person {
  slug String @id

  name        String
  position    String
  description String
  gradYear    Int
  isExec      Boolean @default(false)
  image       String?

  articles    Article[]
  submissions Submission[]
  user        User?
}

enum UserPermission {
  NORMIE
  EDITOR
  ARTIST
  TEAMS_MEMBER
  EXEC
}

enum ArticleStatus {
  SUBMITTED
  EDITED
  PUBLISHED
}
